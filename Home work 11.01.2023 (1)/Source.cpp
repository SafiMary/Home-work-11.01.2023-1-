#include <iostream>
#include <string>
#include <map>
#include <windows.h>
#include <vector>


int main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	std::cout << "Задание №1\n" << std::endl;
	//если мы хотиь хранить пару, самый идеальный вариант это контейнер map, он хранит уникальный ключ( таким может быть как раз название книги)
	//поиск по ней очень удобен через ключ

	std::cout << "Задание №2\n" << std::endl;
	//Временная сложность удаления из вектора составляет О(n), где n равен размеру вектора(ко-во элементов)
	//после удаления элемента все равно нужно сдвинуть все последующие элементы,
	//чтобы заполнить образовавшийся пробел(если стираете например первый элемент).
	//Если стираете последний элемент - сдвигаться не потребуется. 

	std::cout << "Задание №3\n" << std::endl;
	//Так как карта хранит пару ключ-значение, все операции поиска занимают время « O (log (n)) » (n — размер карты)«логарифмическая вычислительная сложность»
	//Поскольку существует внутреннее хранилище элементов в виде двоичного дерева поиска
	//поиск ведется по данному дереву через ключ

	std::cout << "Задание №4\n" << std::endl;
	std::vector<int> vec = { 1, 3, 6, 8 };//создали и инициализировали вектор
	for (std::vector<int>::const_iterator it = vec.begin(); it != vec.end(); it++) {
		std::cout << *it << std::endl;
		vec.erase(it); //инвалидация
	}
	std::vector<int>::const_iterator it = vec.begin(); //создали итератор, он указывает на начало вектора
	vec.erase(vec.begin()); //совершили удаление и теперь итератор указывает на несуществующий адрес ячейки


}